name: Windows Self-hosted CI

# Trigger the workflow on push or pull request
on:
  workflow_dispatch:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

# Define the job
jobs:
  build:
    # Specify the OS and the type of runner (self-hosted, windows)
    runs-on: self-hosted

    steps:
    # Checkout the repository code
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: 'true'  # Automatically initialize and update submodules

    # Set up environment variables
    - name: Set up environment variables
      shell: pwsh
      run: |
        $env:PROJECT_LOCATION = "${{ github.workspace }}"
        $env:WASM_SERVER_RUNNER = "${{ github.workspace }}/tools/wasm-server-runner"
        $env:GAME_CONFIGURATOR = "${{ github.workspace }}/GameConfigurator"
        $env:GAME = "${{ github.workspace }}/ChibiGame"
        $env:TWITCH_BOT = "${{ github.workspace }}/TwitchBot"
        $env:PACKAGE_DIRECTORY = "${{ github.workspace }}/ChibiChatBotGame"
        $env:PACKAGE_GAME_DIRECTORY = "${{ github.workspace }}/ChibiChatBotGame/Game"
        $env:PACKAGE_TOOLS_DIRECTORY = "${{ github.workspace }}/ChibiChatBotGame/Tools"

    # Setup Package folders
    - name: Setup Package folders
      shell: pwsh
      run: |
        $directories = @(
            $env:PACKAGE_DIRECTORY,
            $env:PACKAGE_GAME_DIRECTORY,
            $env:PACKAGE_TOOLS_DIRECTORY
        )

        foreach ($directory in $directories) {
            if (-not (Test-Path -Path $directory)) {
                New-Item -ItemType Directory -Path $directory
                Write-Host "Created directory: $directory"
            } else {
                Write-Host "Directory already exists: $directory"
            }
        }

    # Build Twitch Bot
    - name: Build Twitch Bot
      shell: pwsh
      run: |
        $TWITCH_BOT_LOCATION = "${{ github.workspace }}/TwitchBot"
        $PACKAGE_LOCATION = $env:PACKAGE_DIRECTORY
        $TWITCH_BOT = "$TWITCH_BOT_LOCATION\target\release\TwitchBot.exe"

        Set-Location -Path $TWITCH_BOT_LOCATION
        cargo build --release

        Write-Host "Copying Twitch Bot from $TWITCH_BOT to $PACKAGE_LOCATION"
        Copy-Item -Path $TWITCH_BOT -Destination $PACKAGE_LOCATION -Force

    # Build Chibi Game
    - name: Build Chibi Game
      shell: pwsh
      run: |
        $GAME_LOCATION = "${{ github.workspace }}/ChibiGame"
        $PACKAGE_LOCATION = $env:PACKAGE_GAME_DIRECTORY

        Set-Location -Path $GAME_LOCATION
        cargo build --target wasm32-unknown-unknown --release

        Write-Host "Copying ChibiGame.wasm to $PACKAGE_LOCATION"
        Copy-Item -Path "$GAME_LOCATION\target\wasm32-unknown-unknown\release\ChibiGame.wasm" -Destination $PACKAGE_LOCATION -Force
        Copy-Item -Path "$GAME_LOCATION\assets\fonts" -Destination "$PACKAGE_LOCATION\assets" -Recurse -Force

    # Build Game Configurator
    - name: Build Game Configurator
      shell: pwsh
      run: |
        $GAME_CONFIGURATOR_LOCATION = "${{ github.workspace }}/GameConfigurator"
        $PACKAGE_LOCATION = $env:PACKAGE_DIRECTORY
        $GAME_CONFIGURATOR = "$GAME_CONFIGURATOR_LOCATION\build\release\GameConfigurator.exe"
        $PACKAGED_CONFIGURATOR = "$PACKAGE_LOCATION\GameConfigurator.exe"

        Set-Location -Path $GAME_CONFIGURATOR_LOCATION
        qmake6 -makefile
        make -j4

        Write-Host "Copying GameConfigurator to package"
        Copy-Item -Path $GAME_CONFIGURATOR -Destination $PACKAGE_LOCATION -Force

        Write-Host "Deploying configurator"
        windeployqt --release --qmldir "$GAME_CONFIGURATOR_LOCATION\qml" --plugindir "$PACKAGE_LOCATION\Plugins" "$PACKAGED_CONFIGURATOR"

    # Build WASM Runner
    - name: Build WASM Runner
      shell: pwsh
      run: |
        $WASM_RUNNER_LOCATION = "${{ github.workspace }}/tools/wasm-server-runner"
        $PACKAGE_LOCATION = $env:PACKAGE_TOOLS_DIRECTORY

        Set-Location -Path $WASM_RUNNER_LOCATION
        cargo build --release

        Write-Host "Copying wasm-server-runner to package location"
        Copy-Item -Path "$WASM_RUNNER_LOCATION\target\release\wasm-server-runner" -Destination $PACKAGE_LOCATION -Force
