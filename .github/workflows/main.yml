name: Windows Self-hosted CI

# Trigger the workflow on push or pull request
on:
  workflow_dispatch:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

# Define the job
jobs:
  build:

    # Specify the OS and the type of runner (self-hosted, windows)
    runs-on: self-hosted
    # Alternatively, if you have labeled your runner, you can use:
    # runs-on: [self-hosted, windows]

    steps:
    # Checkout the repository code
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: 'true'  # Automatically initialize and update submodules


    - name: Set up environment variables
      run: |
        echo "PROJECT_LOCATION=${{ github.workspace }}" >> $GITHUB_ENV
        echo "WASM_SERVER_RUNNER=${{ github.workspace }}/tools/wasm-server-runner" >> $GITHUB_ENV
        echo "GAME_CONFIGURATOR=${{ github.workspace }}/GameConfigurator" >> $GITHUB_ENV
        echo "GAME=${{ github.workspace }}/ChibiGame" >> $GITHUB_ENV
        echo "TWITCH_BOT=${{ github.workspace }}/TwitchBot" >> $GITHUB_ENV
        echo "PACKAGE_DIRECTORY=${{ github.workspace }}/ChibiChatBotGame" >> $GITHUB_ENV
        echo "PACKAGE_GAME_DIRECTORY=${{ github.workspace }}/ChibiChatBotGame/Game" >> $GITHUB_ENV
        echo "PACKAGE_TOOLS_DIRECTORY=${{ github.workspace }}/ChibiChatBotGame/Tools" >> $GITHUB_ENV
      shell: cmd

    - name: Setup Package folder
      run: |
        if [ ! -d "$PACKAGE_DIRECTORY" ]; then
          mkdir -p "$PACKAGE_DIRECTORY"
          echo "Created PACKAGE_DIRECTORY: $PACKAGE_DIRECTORY"
        else
          echo "PACKAGE_DIRECTORY already exists: $PACKAGE_DIRECTORY"
        fi

        if [ ! -d "$PACKAGE_GAME_DIRECTORY" ]; then
          mkdir -p "$PACKAGE_GAME_DIRECTORY"
          echo "Created PACKAGE_GAME_DIRECTORY: $PACKAGE_GAME_DIRECTORY"
        else
          echo "PACKAGE_GAME_DIRECTORY already exists: $PACKAGE_GAME_DIRECTORY"
        fi

        if [ ! -d "$PACKAGE_TOOLS_DIRECTORY" ]; then
          mkdir -p "$PACKAGE_TOOLS_DIRECTORY"
          echo "Created PACKAGE_TOOLS_DIRECTORY: $PACKAGE_TOOLS_DIRECTORY"
        else
          echo "PACKAGE_TOOLS_DIRECTORY already exists: $PACKAGE_TOOLS_DIRECTORY"
        fi
      shell: cmd

    - name: Build Twitch Bot
      run: |
        set TWITCH_BOT_LOCATION=${{ github.workspace }}/TwitchBot
        set PACKAGE_LOCATION=${{ env.PACKAGE_DIRECTORY }}
        set TWITCH_BOT="%TWITCH_BOT_LOCATION%\\target\\release\\TwitchBot.exe"

        cd "$TWITCH_BOT_LOCATION"

        cargo build --release

        echo Copying Twitch Bot from $TWITCH_BOT to $PACKAGE_LOCATION
        copy $TWITCH_BOT $PACKAGE_LOCATION
      shell: cmd

    - name: Build Chibi Game
      run: |
        GAME_LOCATION=${{ github.workspace }}/ChibiGame
        PACKAGE_LOCATION=${{ env.PACKAGE_GAME_DIRECTORY }}

        cd "$GAME_LOCATION"

        cargo build --target wasm32-unknown-unknown --release

        echo Copying ChibiGame.wasm to $PACKAGE_LOCATION
        cp "${GAME_LOCATION}/target/wasm32-unknown-unknown/release/ChibiGame.wasm" "$PACKAGE_LOCATION"
        cp -r "${GAME_LOCATION}/assets/fonts" "${PACKAGE_LOCATION}/assets"
      shell: cmd

    # Step: Build Game Configurator
    - name: Build Game Configurator
      run: |
        GAME_CONFIGURATOR_LOCATION=${{ github.workspace }}/GameConfigurator
        PACKAGE_LOCATION=${{ env.PACKAGE_DIRECTORY }}
        GAME_CONFIGURATOR="$GAME_CONFIGURATOR_LOCATION/build/release/GameConfigurator.exe"
        PACKAGED_CONFIGURATOR="$PACKAGE_LOCATION/GameConfigurator.exe"

        cd "$GAME_CONFIGURATOR_LOCATION"

        qmake6 -makefile

        make -j4

        echo "Copying GameConfigurator to package"
        cp "$GAME_CONFIGURATOR" "$PACKAGE_LOCATION"

        echo "Deploying configurator"
        windeployqt --release --qmldir "$GAME_CONFIGURATOR_LOCATION/qml" --plugindir "$PACKAGE_LOCATION/Plugins" "$PACKAGED_CONFIGURATOR"
      shell: cmd

    # Step: Build WASM Runner
    - name: Build WASM Runner
      run: |
        WASM_RUNNER_LOCATION=${{ github.workspace }}/tools/wasm-server-runner
        PACKAGE_LOCATION=${{ env.PACKAGE_TOOLS_DIRECTORY }}

        cd "$WASM_RUNNER_LOCATION"

        cargo build --release

        echo "Copying wasm-server-runner to package location"
        cp "$WASM_RUNNER_LOCATION/target/release/wasm-server-runner" "$PACKAGE_LOCATION"
      shell: cmd
